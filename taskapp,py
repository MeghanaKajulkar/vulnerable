import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# Set the page configuration
st.set_page_config(page_title="Task Management Dashboard", page_icon="âœ…", layout="wide")

# Custom CSS for enhanced UI
st.markdown("""
    <style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f0f0f5;
    }

    .main {
        background-color: #f7f7f7;
    }

    .header-text {
        font-size: 30px;
        font-weight: bold;
        color: #333;
        text-align: center;
    }

    .stButton>button {
        width: 95%;
        height: 60px;
        background-color: #1e88e5;
        color: white;
        font-size: 18px;
        font-weight: bold;
        border-radius: 8px;
        margin-bottom: 15px;
        text-align: center;
    }

    .stButton>button:hover {
        background-color: #1565c0;
    }

    .section-heading {
        font-size: 24px;
        font-weight: bold;
        color: white;
        padding: 10px;
        background-color: #4CAF50;
        border-radius: 8px;
        margin-bottom: 15px;
        text-align: center;
    }

    .task-table {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px;
        background-color: #ffffff;
    }
    </style>
""", unsafe_allow_html=True)

# Initialize session state
if 'tasks' not in st.session_state:
    st.session_state.tasks = []

if 'page' not in st.session_state:
    st.session_state.page = "view_tasks"  # Default page

# Functions
def add_task(task_name, status, deadline):
    priority = "High" if deadline < datetime.today().date() else "Medium"
    task = {
        'task_name': task_name,
        'priority': priority,
        'status': status,
        'deadline': deadline,
        'created_on': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    st.session_state.tasks.append(task)
    st.success(f'Task "{task_name}" added successfully.')

def mark_as_completed(task_name):
    for task in st.session_state.tasks:
        if task['task_name'] == task_name:
            task['status'] = "Completed"
            st.success(f'Task "{task_name}" marked as completed.')

def show_tasks():
    if len(st.session_state.tasks) > 0:
        task_df = pd.DataFrame(st.session_state.tasks)
        task_df['created_on'] = pd.to_datetime(task_df['created_on'])
        task_df['deadline'] = pd.to_datetime(task_df['deadline'])

        # Task table
        st.write('<div class="section-heading">Current Tasks</div>', unsafe_allow_html=True)
        st.dataframe(task_df, width=1200)

        # Mark task as completed
        with st.expander("Mark Task as Completed"):
            task_to_complete = st.selectbox("Select a task", task_df['task_name'])
            if st.button("Mark as Completed"):
                mark_as_completed(task_to_complete)
    else:
        st.write("No tasks added yet.")

def show_task_progress():
    if len(st.session_state.tasks) > 0:
        task_df = pd.DataFrame(st.session_state.tasks)
        task_summary = task_df.groupby('priority').size().reset_index(name='count')

        # Task progress chart
        st.write('<div class="section-heading">Task Progress by Priority</div>', unsafe_allow_html=True)
        plt.figure(figsize=(6, 3))
        sns.barplot(x='priority', y='count', data=task_summary, palette='Set1')
        plt.title('Task Distribution by Priority')
        plt.ylabel('Number of Tasks')
        st.pyplot(plt)

        # Pie chart
        task_status_summary = task_df.groupby('status').size().reset_index(name='count')
        st.write('<div class="section-heading">Task Status Distribution</div>', unsafe_allow_html=True)
        plt.figure(figsize=(4, 4))
        plt.pie(task_status_summary['count'], labels=task_status_summary['status'], autopct='%1.1f%%', startangle=140)
        plt.title('Task Progress by Status')
        st.pyplot(plt)
    else:
        st.write("No tasks to display progress.")

# Sidebar Navigation
st.sidebar.title("Task Dashboard")
if st.sidebar.button("Add Task"):
    st.session_state.page = "add_task"
if st.sidebar.button("View Tasks"):
    st.session_state.page = "view_tasks"
if st.sidebar.button("Task Progress"):
    st.session_state.page = "task_progress"
if st.sidebar.button("Clear Tasks"):
    st.session_state.tasks = []
    st.success("All tasks have been cleared.")

# Page Content
if st.session_state.page == "add_task":
    st.write('<div class="section-heading">Add New Task</div>', unsafe_allow_html=True)
    with st.form(key='task_form', clear_on_submit=True):
        task_name = st.text_input("Task Name", key="task_name", max_chars=50)
        status = st.selectbox("Status", ["Not Started", "In Progress", "Completed"], key="status")
        deadline = st.date_input("Deadline", min_value=datetime.today().date(), key="deadline")
        submit_button = st.form_submit_button("Add Task")

        if submit_button:
            add_task(task_name, status, deadline)

elif st.session_state.page == "view_tasks":
    show_tasks()

elif st.session_state.page == "task_progress":
    show_task_progress()
